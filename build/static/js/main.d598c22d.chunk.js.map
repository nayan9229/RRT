{"version":3,"sources":["components/Header.js","components/Chatview.js","Main.js","serviceWorker.js","index.js"],"names":["Component","Chatview","state","isLoading","data","tweets","selectedUser","bind","getLatestTweete","tweetTounify","this","ls","get","screen_name","scn","hasOwnProperty","isActive","setState","token","secret","cState","fetch","method","headers","body","JSON","stringify","then","res","json","unifry","forEach","tweet","i","user","name","profile_image_url_https","length","push","in_reply_to_status_id","chats","ut","uelement","onClick","key","id","className","src","alt","type","placeholder","aria-hidden","map","isFeomMe","text","created_at","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Main","handleChange","e","target","value","handleSubmit","preventDefault","auth","signInWithEmailAndPassword","email","password","console","log","catch","err","isAuthenticated","isSignedIn","isTwitter","isSignedUp","authError","loginWithTwitter","signUp","logOut","signUpform","onAuthStateChanged","uid","createUserWithEmailAndPassword","resp","message","signOut","set","remove","provider","TwitterAuthProvider","signInWithPopup","result","accessToken","credential","error","href","onSubmit","htmlFor","onChange","align","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d598c22d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Chatview.css';\nimport firebase from \"firebase\"\n\nclass Header extends Component {\n    constructor() {\n        super();\n        this.state = {}\n    }\n\n    componentDidMount() {\n        console.log('Component mounted.', this.props);\n    }\n    logOut(e) {\n        e.preventDefault();\n        firebase.auth().signOut().then(() => {\n            console.log(\"SIGNOUT_SUCCESS\");\n        });\n    }\n\n    render() {\n        return (\n            <header className=\"android-header mdl-layout__header\">\n                <div className=\"mdl-layout__header-row\">\n                    <span className=\"mdl-layout-title\">Title</span>\n                    <div className=\"mdl-layout-spacer\"></div>\n                    <nav className=\"mdl-navigation mdl-layout--large-screen-only\">\n                        {this.props ? (<a onClick={this.logOut} className=\"mdl-navigation__link\" href=\"/\">Logout</a>) : null}\n                    </nav>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './Chatview.css';\nimport ls from 'local-storage'\n\nclass Chatview extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: true,\n      data: {},\n      tweets: []\n    }\n    this.selectedUser = this.selectedUser.bind(this);\n    this.getLatestTweete = this.getLatestTweete.bind(this);\n    this.tweetTounify = this.tweetTounify.bind(this);\n  }\n\n  componentDidMount() {\n    this.getLatestTweete(ls.get('token'), ls.get('secret'));\n  }\n  selectedUser(screen_name) {\n    let data = this.state.data;\n    for (const scn in data) {\n      if (data.hasOwnProperty(scn)) {\n        const d = data[scn];\n        d.isActive = false;\n      }\n    }\n    data[screen_name].isActive = true;\n    this.setState({ tweets: data[screen_name].tweets })\n    this.setState({ data: data })\n  }\n\n  getLatestTweete(token, secret) {\n    let cState = this;\n    fetch('/apis/6IJiBbLkBcc8HsIpNYINhruTCQF2/status', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        \"token\": token,\n        \"secret\": secret\n      })\n    })\n      .then(function (res) {\n        return res.json();\n      })\n      .then(function (data) {\n        data = cState.tweetTounify(data.data);\n        cState.setState({ data: data });\n      })\n  }\n\n  tweetTounify(tweets) {\n    const unifry = {};\n    tweets.forEach((tweet, i) => {\n      if (!unifry[tweet.user.screen_name]) {\n        unifry[tweet.user.screen_name] = {};\n        unifry[tweet.user.screen_name].tweets = [];\n      }\n      unifry[tweet.user.screen_name].screen_name = tweet.user.screen_name\n      unifry[tweet.user.screen_name].name = tweet.user.name\n      unifry[tweet.user.screen_name].profile_image_url_https = tweet.user.profile_image_url_https\n      unifry[tweet.user.screen_name].isActive = false\n      if (i === 0) {\n        unifry[tweet.user.screen_name].isActive = true;\n      }\n      if (unifry[tweet.user.screen_name].tweets.length > 0) {\n        unifry[tweet.user.screen_name].tweets.push(tweet);\n      } else {\n        unifry[tweet.user.screen_name].tweets = [];\n        unifry[tweet.user.screen_name].tweets.push(tweet);\n      }\n      if (tweet.user.in_reply_to_status_id) {\n        if (!unifry[tweet.user.in_reply_to_status_id]) {\n          unifry[tweet.user.in_reply_to_status_id] = {};\n          unifry[tweet.user.in_reply_to_status_id].tweets = [];\n        }\n\n        if (unifry[tweet.user.in_reply_to_status_id].tweets.length > 0) {\n          unifry[tweet.user.in_reply_to_status_id].tweets.push(tweet);\n        } else {\n          unifry[tweet.user.in_reply_to_status_id].tweets = [];\n          unifry[tweet.user.in_reply_to_status_id].tweets.push(tweet);\n        }\n      }\n    });\n    return unifry;\n  }\n\n  render() {\n    const chats = [];\n    for (const user in this.state.data) {\n      if (this.state.data.hasOwnProperty(user)) {\n        const ut = this.state.data[user];\n        const uelement = <div onClick={() => this.selectedUser(ut.screen_name)} key={ut.screen_name} id={ut.screen_name} className={ut.isActive ? 'chat_list active_chat' : 'chat_list'}>\n          <div className=\"chat_people\">\n            <div className=\"chat_img\"> <img src={ut.profile_image_url_https} alt={ut.screen_name} /> </div>\n            <div className=\"chat_ib\">\n              <h5>{ut.name} <span className=\"chat_date\"></span></h5>\n              <p>{ut.screen_name}</p>\n            </div>\n          </div>\n        </div>;\n        chats.push(uelement);\n      }\n    }\n    return (\n      <div className=\"Chatview\" >\n        {/* <pre>{JSON.stringify(this.state)}</pre> */}\n        <div className=\"messaging\" >\n          <div className=\"inbox_msg\">\n            <div className=\"inbox_people\">\n              <div className=\"headind_srch\">\n                <div className=\"recent_heading\">\n                  <h4>Recent</h4>\n                </div>\n                <div className=\"srch_bar\">\n                  <div className=\"stylish-input-group\">\n                    <input type=\"text\" className=\"search-bar\" placeholder=\"Search\" />\n                    <span className=\"input-group-addon\">\n                      <button type=\"button\"> <i className=\"fa fa-search\" aria-hidden=\"true\"></i> </button>\n                    </span> </div>\n                </div>\n              </div>\n              <div className=\"inbox_chat\">\n                {chats}\n              </div>\n            </div>\n            <div className=\"mesgs\">\n              <div className=\"msg_history\">\n                {this.state.tweets.map((tweet, i) => <div className={tweet.isFeomMe ? \"outgoing_msg\" : \"incoming_msg\"} key={i}>\n                  <div className=\"incoming_msg_img\"> <img src={tweet.user.profile_image_url_https} alt={tweet.user.name} /> </div>\n                  <div className=\"received_msg\">\n                    <div className=\"received_withd_msg\">\n                      <p>{tweet.text}</p>\n                      <span className=\"time_date\">{tweet.created_at}</span></div>\n                  </div>\n                </div>)}\n\n                {/* <div className=\"outgoing_msg\">\n                  <div className=\"sent_msg\">\n                    <p>Test which is a new approach to have all\n                  solutions</p>\n                    <span className=\"time_date\"> 11:01 AM    |    June 9</span> </div>\n                </div>\n                <div className=\"incoming_msg\">\n                  <div className=\"incoming_msg_img\"> <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" /> </div>\n                  <div className=\"received_msg\">\n                    <div className=\"received_withd_msg\">\n                      <p>Test, which is a new approach to have</p>\n                      <span className=\"time_date\"> 11:01 AM    |    Yesterday</span></div>\n                  </div>\n                </div>\n                <div className=\"outgoing_msg\">\n                  <div className=\"sent_msg\">\n                    <p>Apollo University, Delhi, India Test</p>\n                    <span className=\"time_date\"> 11:01 AM    |    Today</span> </div>\n                </div>\n                <div className=\"incoming_msg\">\n                  <div className=\"incoming_msg_img\"> <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" /> </div>\n                  <div className=\"received_msg\">\n                    <div className=\"received_withd_msg\">\n                      <p>We work directly with our designers and suppliers,\n                        and sell direct to you, which means quality, exclusive\n                    products, at a price anyone can afford.</p>\n                      <span className=\"time_date\"> 11:01 AM    |    Today</span></div>\n                  </div>\n                </div> */}\n              </div>\n              <div className=\"type_msg\">\n                <div className=\"input_msg_write\">\n                  <input type=\"text\" className=\"write_msg\" placeholder=\"Type a message\" />\n                  <button className=\"msg_send_btn\" type=\"button\"><i className=\"fa fa-paper-plane-o\" aria-hidden=\"true\"></i></button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default Chatview;","import React, { Component } from 'react';\nimport './Main.css';\n// import StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\nimport firebase from \"firebase\"\nimport Header from './components/Header';\nimport Chatview from './components/Chatview';\nimport ls from 'local-storage';\nvar config = {\n    apiKey: \"AIzaSyAM5--2ZDdVMAyIAGiJgLQOsdRlEpNewe0\",\n    authDomain: \"richpanel-92326.firebaseapp.com\",\n    databaseURL: \"https://richpanel-92326.firebaseio.com\",\n    projectId: \"richpanel-92326\",\n    storageBucket: \"\",\n    messagingSenderId: \"677614933086\",\n    appId: \"1:677614933086:web:32b7af57a907d31ae290cf\",\n    measurementId: \"G-95XWCEQQ5Y\"\n};\nfirebase.initializeApp(config);\n// firebase.firestore().settings();\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: true,\n            email: '',\n            password: '',\n            isAuthenticated: false,\n            isSignedIn: false,\n            isTwitter: false,\n            isSignedUp: false,\n            authError: ''\n        }\n        this.loginWithTwitter = this.loginWithTwitter.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.signUp = this.signUp.bind(this);\n        this.logOut = this.logOut.bind(this);\n        this.signUpform = this.signUpform.bind(this);\n    }\n    // uiConfig = {\n    //     signInFlow: \"popup\",\n    //     signInOptions: [\n    //         firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n    //         firebase.auth.EmailAuthProvider.PROVIDER_ID\n    //     ],\n    //     callbacks: {\n    //         signInSuccess: () => false\n    //     }\n    // }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        // this.props.signIn(this.state)\n        firebase.auth().signInWithEmailAndPassword(\n            this.state.email, this.state.password\n        ).then(() => {\n            console.log(\"LOGIN_SUCCESS\");\n        }).catch((err) => {\n            console.log(\"LOGIN_ERROR\");\n        });\n    }\n\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                // this.setState({ isAuthenticated: !!user })\n                this.setState({ user })\n                this.setState({ isAuthenticated: true })\n                this.setState({ isSignedIn: false })\n                this.setState({ isSignedUp: false })\n                this.setState({ isTwitter: true })\n                this.setState({ uid: user.uid })\n\n                if (ls.get('token')) {\n                    this.setState({ isTwitter: false });\n                } else {\n                    this.setState({ isTwitter: true });\n                    this.setState({ isAuthenticated: false })\n                }\n\n            } else {\n                this.setState({ isSignedIn: true })\n            }\n        });\n    }\n\n    signUp(e) {\n        e.preventDefault();\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then(resp => {\n            // return firestore.collection('users').doc(resp.user.uid).set({})\n            console.log(resp);\n            this.setState({ authError: ''})\n        }).catch(err => {\n            console.log('======', err.message);\n            this.setState({ authError: ''+ err.message })\n        });\n    }\n\n    logOut(e) {\n        firebase.auth().signOut().then(() => {\n            console.log(\"SIGNOUT_SUCCESS\");\n        });\n        this.setState({ isAuthenticated: false })\n        this.setState({ isSignedIn: false })\n        this.setState({ isSignedUp: false })\n        this.setState({ isTwitter: false })\n        this.setState({ data: {} })\n        this.setState({ tweets: [] })\n        // window.location.reload(false);\n        ls.set('token', null);\n        ls.set('secret', null);\n        ls.remove('token');\n        ls.remove('secret');\n        e.preventDefault();\n    }\n\n    loginWithTwitter(e) {\n        e.preventDefault();\n\n        var provider = new firebase.auth.TwitterAuthProvider();\n        let cState = this;\n        //firebase.auth().signInWithPopup(provider).\n        firebase.auth().signInWithPopup(provider).then(function (result) {\n            cState.setState({ accessToken: result.credential.accessToken, secret: result.credential.secret })\n            cState.setState({ user: result.user })\n            cState.setState({ result })\n            cState.setState({ isTwitter: false });\n            cState.setState({ isAuthenticated: true });\n            ls.set('token', result.credential.accessToken);\n            ls.set('secret', result.credential.secret);\n        }).catch(function (error) {\n            console.log(error);\n            // var errorCode = error.code;\n            // var errorMessage = error.message;\n            // var email = error.email;\n            // var credential = error.credential;\n        });\n    }\n\n    signUpform(e) {\n        e.preventDefault();\n        this.setState({ isAuthenticated: false })\n        this.setState({ isSignedIn: false })\n        this.setState({ isSignedUp: true })\n        this.setState({ isTwitter: true })\n    }\n\n    render() {\n        return (\n            <div className=\"mdl-layout mdl-js-layout mdl-layout--fixed-header mdl-color--blue-grey-50\" >\n                <header className=\"android-header mdl-layout__header\">\n                    <div className=\"mdl-layout__header-row\">\n                        <span className=\"mdl-layout-title\">Title</span>\n                        <div className=\"mdl-layout-spacer\"></div>\n                        <nav className=\"mdl-navigation mdl-layout--large-screen-only\">\n                            {this.state.isAuthenticated ? (<a onClick={this.logOut} className=\"mdl-navigation__link\" href=\"/\">Logout</a>) : null}\n                        </nav>\n                    </div>\n                </header>\n                <main className=\"mdl-layout__content\">\n                    <div className=\"page-content\">\n                        {/* <pre>{JSON.stringify(this.state)}</pre> */}\n                        {this.state.isAuthenticated ? (\n                            <Chatview />\n                        ) : this.state.isSignedIn ? (\n                            <div className=\"android-more-section mdl-grid\">\n                                <div className=\"mdl-cell mdl-cell--2-col\"></div>\n                                <div className=\"android-card-container mdl-card mdl-shadow--2dp mdl-cell--8-col mdl-cell--12-col-phone\">\n                                    <form className=\"white\" onSubmit={this.handleSubmit}>\n                                        <div className=\"mdl-card__title\">\n                                            <h2 className=\"mdl-card__title-text\">User Login</h2>\n                                        </div>\n                                        <div className=\"mdl-card__supporting-text mdl-grid\">\n                                            <b className=\"mdl-color-text--accent\">{this.state.authError}</b>\n                                            <input type=\"hidden\" name=\"action\" value=\"login\" />\n                                            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--12-col\">\n                                                <label className=\"mdl-textfield__label\" htmlFor=\"email\">Email</label>\n                                                <input className=\"mdl-textfield__input\" type=\"email\" id='email' onChange={this.handleChange} />\n                                            </div>\n                                            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--12-col\">\n                                                <label className=\"mdl-textfield__label\" htmlFor=\"password\">Password</label>\n                                                <input className=\"mdl-textfield__input\" type=\"password\" id='password' onChange={this.handleChange} />\n                                            </div>\n                                            <div className=\"mdl-cell mdl-cell--12-col\" align=\"center\">\n                                                <button type=\"submit\" className=\"mdl-cell--5-col mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"> SignIn </button>\n\n                                                <button onClick={this.signUpform} type=\"submit\" className=\"mdl-cell--1-offset mdl-cell--5-col mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"> SignUp </button>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        ) : this.state.isSignedUp ? (\n                            <div className=\"android-more-section mdl-grid\">\n                                <div className=\"mdl-cell mdl-cell--2-col\"></div>\n                                <div className=\"android-card-container mdl-card mdl-shadow--2dp mdl-cell--8-col mdl-cell--12-col-phone\">\n                                    <form className=\"white\" onSubmit={this.signUp}>\n                                        <div className=\"mdl-card__title\">\n                                            <h2 className=\"mdl-card__title-text\">Sign Up</h2>\n                                        </div>\n                                        <div className=\"mdl-card__supporting-text mdl-grid\">\n                                            <b className=\"mdl-color-text--accent\">{this.state.authError}</b>\n                                            <input type=\"hidden\" name=\"action\" value=\"login\" />\n                                            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--12-col\">\n                                                <label className=\"mdl-textfield__label\" htmlFor=\"email\">Email</label>\n                                                <input className=\"mdl-textfield__input\" type=\"email\" id='email' onChange={this.handleChange} />\n                                            </div>\n                                            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--12-col\">\n                                                <label className=\"mdl-textfield__label\" htmlFor=\"password\">Password</label>\n                                                <input className=\"mdl-textfield__input\" type=\"password\" id='password' onChange={this.handleChange} />\n                                            </div>\n                                            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--12-col\">\n                                                <label className=\"mdl-textfield__label\" htmlFor=\"firstName\">First Name</label>\n                                                <input className=\"mdl-textfield__input\" type=\"text\" id='firstName' onChange={this.handleChange} />\n                                            </div>\n                                            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--12-col\">\n                                                <label className=\"mdl-textfield__label\" htmlFor=\"lastName\">Last Name</label>\n                                                <input className=\"mdl-textfield__input\" type=\"text\" id='lastName' onChange={this.handleChange} />\n                                            </div>\n\n                                            <div className=\"mdl-cell mdl-cell--12-col\" align=\"center\">\n                                                <button type=\"submit\" className=\"mdl-cell--12-col mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">Sign Up </button>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div></div>\n                        ) : this.state.isTwitter ? (\n                            <div className=\"mdl-cell--12-col mdl-grid\">\n                                <div className=\"mdl-cell mdl-cell--2-col\"></div>\n                                <div className=\"android-card-container mdl-card mdl-shadow--2dp mdl-cell--8-col mdl-cell--12-col-phone\">\n                                    <div className=\"mdl-card__title\">\n                                        <h2 className=\"mdl-card__title-text\">Connect your twitter to continue</h2>\n                                    </div>\n                                    <div className=\"mdl-cell mdl-cell--12-col\" align=\"center\">\n                                        <button onClick={this.loginWithTwitter} className=\"mdl-cell--6-col mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">Connect Twitter</button>\n                                    </div>\n                                </div></div>\n                        ) : (<div></div>)}\n                    </div>\n                </main>\n            </div >\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}